#### PARAMETERS
lambda=coefflam*CQ # ~= CQ*nb*v
print(lambda)
#### Possible values for latent variables ####
LatTypes=LatLibrary(Nit=floor(N/2)*2,NK=floor(N/2)*6,lambda=lambda*2.5,L=L)
LatTypesj=LatTypes%*%coverseq
dim(LatTypes)
pobs=pobsT
# EM algorithm:
resoptpropl=OptProplEM(NY,LatTypes=LatTypes,
ObsTypes=ObsTypes,pobs=pobsT,
lambda0=lambda,prec=100,
propl0=NULL,Nit=300,plotopt=T,
evallam=F)
resoptpropl$propl
PROPL[p,]=resoptpropl$propl
}
seqtypes=apply(coverseq,1,paste0,collapse="-")
colnames(PROPL)=seqtypes
# save(PROPL,file="ProportionsPlasmideIntegreQuintuplex-lamQiagen-pobsLlik-proplEM.RData")
PROPLplot=data.frame("conc"=vectC)
PROPLplot=cbind(PROPLplot,PROPL)
par(mar=c(6,3,4,1))
boxplot(PROPL,las=2,ylim=c(0,1),
main="Proportions apprises par EM\n Plasmides intègres 5 cibles, pobs par maxLL")
points(proplT,pch=19,col=4)
#### Data loading
rm(datfull)
datfull <- read_excel("DATA/Quintuplex plasmide SARS-CoV-2_LCPME_20231221.xlsx",
sheet = "Plasmide fragmenté-5 cibles",
col_names = FALSE, skip = 1)
datfull <- read_excel("../DATA/Quintuplex plasmide SARS-CoV-2_LCPME_20231221.xlsx",
sheet = "Plasmide fragmenté-5 cibles",
col_names = FALSE, skip = 1)
# Observation vectors:
ObsTypes=datfull[-1,2:6]
colnames(ObsTypes)=datfull[1,2:6]
ObsTypes=apply(ObsTypes,2,sub,pattern ="+",replacement="1",fixed=T)
ObsTypes=apply(ObsTypes,2,sub,pattern ="-",replacement="0",fixed=T)
ObsTypes=apply(ObsTypes,2,as.numeric)
ObsTypesChar=apply(ObsTypes,1,paste0,collapse="-")
# Number of observation of each type in each sample:
matNY=datfull[-1,-c(1:7)]
# Vector of sample concentrations (in cg/microlitre):
vectC=unlist(datfull[1,-c(1:7)])
P=ncol(matNY)
for(p in 2:P){
if(is.na(vectC[p])){
vectC[p]=vectC[p-1]
}
}
L=sum(1:J) # number of possible different contiguous sequences
coverseq=matrix(data=0,ncol=J,nrow=L) # description of the sequences types
j=0
for(k in J:1){
for(i in k:J){
j=j+1
coverseq[j,]=c(rep(0,(i-k)),rep(1,k),rep(0,J-i))
}
}
L=sum(1:J) # number of possible different contiguous sequences
coverseq=defseqtypes(J) # description of the sequences types
pobsT
#### proportions inference ####
PROPL=matrix(data=NA,ncol=L,nrow=P)
p=1
print(paste("sample=",p))
#### OBS
NY=unlist(as.vector(matNY[,p]))
N=sum(NY)
print(N)
CQ=as.numeric(vectC[p])
#### PARAMETERS
lambda=coefflam*CQ # ~= CQ*nb*v
print(lambda)
#### Possible values for latent variables ####
LatTypes=LatLibrary(Nit=floor(N/2)*2,NK=floor(N/2)*6,lambda=lambda*2.5)
#### Possible values for latent variables ####
LatTypes=LatLibrary(Nit=floor(N/2)*2,NK=floor(N/2)*6,lambda=lambda*2.5,L=L)
dim(LatTypes)
# EM algorithm:
resoptpropl=OptProplEM(NY,LatTypes=LatTypes,
ObsTypes=ObsTypes,pobs=pobsT,
lambda0=lambda,prec=100,
propl0=NULL,Nit=300,plotopt=T,
evallam=F)
# resoptpropl=OptProplEM(NY,LatTypes,coverseq,ObsTypes,pobs=pobsT,
#                        lambda0=lambda,Nit=300,evallam=F)#,propl0=PROPL[p,]
resoptpropl$propl
#### proportions inference ####
PROPL=matrix(data=NA,ncol=L,nrow=P)
for(p in 1:(P)){
print(paste("sample=",p))
#### OBS
NY=unlist(as.vector(matNY[,p]))
N=sum(NY)
print(N)
CQ=as.numeric(vectC[p])
#### PARAMETERS
lambda=coefflam*CQ # ~= CQ*nb*v
print(lambda)
#### Possible values for latent variables ####
LatTypes=LatLibrary(Nit=floor(N/2)*2,NK=floor(N/2)*6,lambda=lambda*2.5,L=L)
dim(LatTypes)
# EM algorithm:
resoptpropl=OptProplEM(NY,LatTypes=LatTypes,
ObsTypes=ObsTypes,pobs=pobsT,
lambda0=lambda,prec=100,
propl0=NULL,Nit=300,plotopt=T,
evallam=F)
# resoptpropl=OptProplEM(NY,LatTypes,coverseq,ObsTypes,pobs=pobsT,
#                        lambda0=lambda,Nit=300,evallam=F)#,propl0=PROPL[p,]
resoptpropl$propl
PROPL[p,]=resoptpropl$propl
}
proplT=rep(0,L)
proplT[L-(1:J)+1]=rep(1/J,J)
seqtypes=apply(coverseq,1,paste0,collapse="-")
colnames(PROPL)=seqtypes
par(mar=c(6,3,4,1))
boxplot(PROPL,las=2,
main="Proportion apprise par type de séquence\nPlasmide fragmenté 5 cibles, pobs par maxV directe")
points(proplT,pch=19,col=4)
PROPLplot=data.frame("conc"=vectC)
PROPLplot=cbind(PROPLplot,PROPL)
#### Data loading
rm(datfull)
datfull <- read_excel("DATA/Résultats intégrité de génome-LCPME_20231108.xlsx",
sheet = "Echantillons",
col_names = FALSE)
datfull <- read_excel("../DATA/Résultats intégrité de génome-LCPME_20231108.xlsx",
sheet = "Echantillons",
col_names = FALSE)
# Observation vectors:
ObsTypes=datfull[-c(1:3),2:6]
colnames(ObsTypes)=datfull[3,2:6]
ObsTypes=apply(ObsTypes,2,sub,pattern ="+",replacement="1",fixed=T)
ObsTypes=apply(ObsTypes,2,sub,pattern ="-",replacement="0",fixed=T)
ObsTypes=apply(ObsTypes,2,as.numeric)
ObsTypesChar=apply(ObsTypes,1,paste0,collapse="-")
LengthByObs=cbind(ObsTypesChar,as.numeric(unlist(datfull[-c(1:3),7])))
# Number of observation of each type in each sample:
matNY=datfull[-c(1:3),-c(1:7)]
colnames(matNY)=datfull[3,-c(1:7)]
P=ncol(matNY)
# Vector of sample concentrations (in cg/microlitre):
vectC=as.numeric(unlist(datfull[1,-c(1:7)]))
vecExtract=unlist(datfull[2,-c(1:7)])
vectDay=unlist(datfull[3,-c(1:7)])
names(vectDay)=NULL
names(vecExtract)=NULL
vecExtract=as.factor(vecExtract)
L=sum(1:J) # number of possible different contiguous sequences
coverseq=defseqtypes(J) # description of the sequences types
#### proportions inference ####
pobs=pobsT
# pobs=rep(0.99,5)
PROPL=matrix(data=NA,ncol=L,nrow=P)
#### proportions inference ####
pobs=pobsT
# pobs=rep(0.99,5)
PROPL=matrix(data=NA,ncol=L,nrow=P)
for(p in 1:(P)){
print(paste("sample=",p))
#### OBS
NY=as.numeric(unlist(as.vector(matNY[,p])))
N=sum(NY)
print(N)
CQ=as.numeric(vectC[p])
#### PARAMETERS
lambda=coefflam*CQ # ~= CQ*nb*v
print(lambda)
#### Possible values for latent variables ####
LatTypes=LatLibrary(Nit=floor(N/2)*2,NK=floor(N/2)*6,lambda=lambda*2.5,L=L)
dim(LatTypes)
# EM algorithm:
resoptpropl=OptProplEM(NY,LatTypes=LatTypes,
ObsTypes=ObsTypes,pobs=pobsT,
lambda0=lambda,prec=100,
propl0=NULL,Nit=300,plotopt=T,
evallam=F)
resoptpropl$propl
PROPL[p,]=resoptpropl$propl
}
# EM algorithm:
for(nsim in 1:10){
resoptpropl=OptProplEM(NY,LatTypes=LatTypes,
ObsTypes=ObsTypes,pobs=pobsT,
lambda0=lambda,prec=100,
propl0=NULL,Nit=300,plotopt=T,
evallam=F)
print(resoptpropl$propl)
}
# EM algorithm:
PROPLinits=matrix(data=NA,ncol=L,nrow=10)
for(nsim in 1:10){ # several initializations
resoptpropl=OptProplEM(NY,LatTypes=LatTypes,
ObsTypes=ObsTypes,pobs=pobsT,
lambda0=lambda,prec=100,
propl0=NULL,Nit=300,plotopt=T,
evallam=F)
PROPLinits[nsim,]=resoptpropl$propl
}
boxplot(PROPLinits)
apply(PROPLinits,2,median)
sum(apply(PROPLinits,2,median))
rm(datfull)
datfull <- read_excel("../DATA/Quintuplex plasmide SARS-CoV-2_LCPME_20231221.xlsx",
sheet = "Plasmide intègre-5 cibles",
col_names = FALSE, skip = 1)
# Observation vectors:
ObsTypes=datfull[-1,2:6]
colnames(ObsTypes)=datfull[1,2:6]
ObsTypes=apply(ObsTypes,2,sub,pattern ="+",replacement="1",fixed=T)
ObsTypes=apply(ObsTypes,2,sub,pattern ="-",replacement="0",fixed=T)
ObsTypes=apply(ObsTypes,2,as.numeric)
ObsTypesChar=apply(ObsTypes,1,paste0,collapse="-")
# Number of observation of each type in each sample:
matNY=as.matrix(datfull[-1,-c(1:7)])
rownames(matNY)=ObsTypesChar
vectC=unlist(datfull[1,-c(1:7)])
P=ncol(matNY)
for(p in 2:P){
if(is.na(vectC[p])){
vectC[p]=vectC[p-1]
}
}
PROPL=matrix(data=NA,ncol=L,nrow=P)
for(p in 1:(P)){
print(paste("sample=",p))
#### OBS
NY=unlist(as.vector(matNY[,p]))
N=sum(NY)
print(N)
CQ=as.numeric(vectC[p])
#### PARAMETERS
lambda=coefflam*CQ # ~= CQ*nb*v
print(lambda)
#### Possible values for latent variables ####
LatTypes=LatLibrary(Nit=floor(N/2)*2,NK=floor(N/2)*6,lambda=lambda*2.5,L=L)
LatTypesj=LatTypes%*%coverseq
dim(LatTypes)
# EM algorithm:
PROPLinits=matrix(data=NA,ncol=L,nrow=10)
for(nsim in 1:10){ # several initializations
resoptpropl=OptProplEM(NY,LatTypes=LatTypes,
ObsTypes=ObsTypes,pobs=pobsT,
lambda0=lambda,prec=100,
propl0=NULL,Nit=300,plotopt=T,
evallam=F)
PROPLinits[nsim,]=resoptpropl$propl
}
PROPL[p,]=apply(PROPLinits,2,median)
}
seqtypes=apply(coverseq,1,paste0,collapse="-")
colnames(PROPL)=seqtypes
# save(PROPL,file="ProportionsPlasmideIntegreQuintuplex-lamQiagen-pobsLlik-proplEM.RData")
PROPLplot=data.frame("conc"=vectC)
PROPLplot=cbind(PROPLplot,PROPL)
par(mar=c(6,3,4,1))
boxplot(PROPL,las=2,ylim=c(0,1),
main="Proportions apprises par EM\n Plasmides intègres 5 cibles, pobs par maxLL")
points(proplT,pch=19,col=4)
# write.csv(x=PROPLplot,file = "ResultsFromPlasmideIntegreQuintuplexSamples.csv")
proplT=rep(0,L)
proplT[1]=1
par(mar=c(6,3,4,1))
boxplot(PROPL,las=2,ylim=c(0,1),
main="Proportions apprises par EM\n Plasmides intègres 5 cibles, pobs par maxLL")
points(proplT,pch=19,col=4)
#### Data loading
rm(datfull)
datfull <- read_excel("../DATA/Quintuplex plasmide SARS-CoV-2_LCPME_20231221.xlsx",
sheet = "Plasmide fragmenté-5 cibles",
col_names = FALSE, skip = 1)
# Observation vectors:
ObsTypes=datfull[-1,2:6]
colnames(ObsTypes)=datfull[1,2:6]
ObsTypes=apply(ObsTypes,2,sub,pattern ="+",replacement="1",fixed=T)
ObsTypes=apply(ObsTypes,2,sub,pattern ="-",replacement="0",fixed=T)
ObsTypes=apply(ObsTypes,2,as.numeric)
ObsTypesChar=apply(ObsTypes,1,paste0,collapse="-")
# Number of observation of each type in each sample:
matNY=datfull[-1,-c(1:7)]
# Vector of sample concentrations (in cg/microlitre):
vectC=unlist(datfull[1,-c(1:7)])
P=ncol(matNY)
for(p in 2:P){
if(is.na(vectC[p])){
vectC[p]=vectC[p-1]
}
}
L=sum(1:J) # number of possible different contiguous sequences
coverseq=defseqtypes(J) # description of the sequences types
#### proportions inference ####
PROPL=matrix(data=NA,ncol=L,nrow=P)
for(p in 1:(P)){
print(paste("sample=",p))
#### OBS
NY=unlist(as.vector(matNY[,p]))
N=sum(NY)
print(N)
CQ=as.numeric(vectC[p])
#### PARAMETERS
lambda=coefflam*CQ # ~= CQ*nb*v
print(lambda)
#### Possible values for latent variables ####
LatTypes=LatLibrary(Nit=floor(N/2)*2,NK=floor(N/2)*6,lambda=lambda*2.5,L=L)
dim(LatTypes)
# EM algorithm:
PROPLinits=matrix(data=NA,ncol=L,nrow=10)
for(nsim in 1:10){ # several initializations
resoptpropl=OptProplEM(NY,LatTypes=LatTypes,
ObsTypes=ObsTypes,pobs=pobsT,
lambda0=lambda,prec=100,
propl0=NULL,Nit=300,plotopt=T,
evallam=F)
PROPLinits[nsim,]=resoptpropl$propl
}
PROPL[p,]=apply(PROPLinits,2,median)
}
proplT=rep(0,L)
proplT[L-(1:J)+1]=rep(1/J,J)
seqtypes=apply(coverseq,1,paste0,collapse="-")
colnames(PROPL)=seqtypes
par(mar=c(6,3,4,1))
boxplot(PROPL,las=2,
main="Proportion apprise par type de séquence\nPlasmide fragmenté 5 cibles, pobs par maxV directe")
points(proplT,pch=19,col=4)
PROPLplot=data.frame("conc"=vectC)
PROPLplot=cbind(PROPLplot,PROPL)
#### Data loading
rm(datfull)
datfull <- read_excel("../DATA/Résultats intégrité de génome-LCPME_20231108.xlsx",
sheet = "Echantillons",
col_names = FALSE)
# Observation vectors:
ObsTypes=datfull[-c(1:3),2:6]
colnames(ObsTypes)=datfull[3,2:6]
ObsTypes=apply(ObsTypes,2,sub,pattern ="+",replacement="1",fixed=T)
ObsTypes=apply(ObsTypes,2,sub,pattern ="-",replacement="0",fixed=T)
ObsTypes=apply(ObsTypes,2,as.numeric)
ObsTypesChar=apply(ObsTypes,1,paste0,collapse="-")
LengthByObs=cbind(ObsTypesChar,as.numeric(unlist(datfull[-c(1:3),7])))
# Number of observation of each type in each sample:
matNY=datfull[-c(1:3),-c(1:7)]
colnames(matNY)=datfull[3,-c(1:7)]
P=ncol(matNY)
# Vector of sample concentrations (in cg/microlitre):
vectC=as.numeric(unlist(datfull[1,-c(1:7)]))
vecExtract=unlist(datfull[2,-c(1:7)])
vectDay=unlist(datfull[3,-c(1:7)])
names(vectDay)=NULL
names(vecExtract)=NULL
vecExtract=as.factor(vecExtract)
L=sum(1:J) # number of possible different contiguous sequences
coverseq=defseqtypes(J) # description of the sequences types
#### proportions inference ####
pobs=pobsT
# pobs=rep(0.99,5)
PROPL=matrix(data=NA,ncol=L,nrow=P)
for(p in 1:(P)){
print(paste("sample=",p))
#### OBS
NY=as.numeric(unlist(as.vector(matNY[,p])))
N=sum(NY)
print(N)
CQ=as.numeric(vectC[p])
#### PARAMETERS
lambda=coefflam*CQ # ~= CQ*nb*v
print(lambda)
#### Possible values for latent variables ####
LatTypes=LatLibrary(Nit=floor(N/2)*2,NK=floor(N/2)*6,lambda=lambda*2.5,L=L)
dim(LatTypes)
# EM algorithm:
PROPLinits=matrix(data=NA,ncol=L,nrow=10)
for(nsim in 1:10){ # several initializations
resoptpropl=OptProplEM(NY,LatTypes=LatTypes,
ObsTypes=ObsTypes,pobs=pobsT,
lambda0=lambda,prec=100,
propl0=NULL,Nit=300,plotopt=T,
evallam=F)
PROPLinits[nsim,]=resoptpropl$propl
}
PROPL[p,]=apply(PROPLinits,2,median)
}
seqtypes=apply(coverseq,1,paste0,collapse="-")
colnames(PROPL)=seqtypes
# pdf("ProportionsEchantillons5cibles-v3.pdf",width=8,height=5)
par(mar=c(6,3,4,1))
boxplot(PROPL,las=2,
main="Proportion apprise par type de séquence\nEchantillons 5 cibles")
PROPLplot=data.frame("conc"=vectC,"extract"=vecExtract,"ech"=vectDay,"echtype"=substr(vectDay, 1, 2))
PROPLplot=cbind(PROPLplot,PROPL)
# colnames(PROPLplot)=c("conc","extract","ech",colnames(PROPL))
PROPLplot2=reshape2::melt(PROPLplot,id.vars=c("conc","extract","ech","echtype"))
PROPLplot2$length=PROPLplot2$value
seqtypestable=colnames(PROPL)
lenseqs=numeric(L)
l=0
for(namseq in seqtypestable){
l=l+1
print(namseq)
lengseq=as.numeric(LengthByObs[LengthByObs[,1]==namseq,2])
print(lengseq)
lenseqs[l]=lengseq
whichseqtype=which(PROPLplot2$variable==namseq)
PROPLplot2$length[which(PROPLplot2$variable==namseq)]=as.numeric(LengthByObs[LengthByObs[,1]==namseq,2])
}
# converting the proportions of each sequence type
# into vectors of sequences lengths for each sample:
matsampsizes=matrix(data=NA,ncol=nrow(PROPLplot),nrow=N)
for(nsamp in 1:nrow(PROPLplot)){
matsampsizes[,nsamp]=lenseqs[apply(rmultinom(n=N,size=1,prob=PROPLplot[nsamp,-c(1:3)]),2,which.max)]
}
View(PROPLplot)
lenseqs
PROPLplot[nsamp,-c(1:3)]),2,which.max)]
PROPLplot[nsamp,-c(1:3)]
print(nsamp)
matsampsizes[,nsamp]=lenseqs[apply(rmultinom(n=N,size=1,prob=PROPLplot[nsamp,-c(1:3)]),2,which.max)]
test=rmultinom(n=N,size=1,prob=PROPLplot[nsamp,-c(1:3)])
=PROPLplot[nsamp,-c(1:3)]
PROPLplot[nsamp,-c(1:3)]
# converting the proportions of each sequence type
# into vectors of sequences lengths for each sample:
matsampsizes=matrix(data=NA,ncol=nrow(PROPLplot),nrow=N)
for(nsamp in 1:nrow(PROPLplot)){
print(nsamp)
matsampsizes[,nsamp]=lenseqs[apply(rmultinom(n=N,size=1,prob=PROPLplot[nsamp,-c(1:4)]),2,which.max)]
}
# colnames(matsampsizes)=vectDay
# boxplot(matsampsizes)
sizeplot=data.frame("conc"=vectC,"extract"=vecExtract,"ech"=vectDay,"echtype"=substr(vectDay, 1, 2))
sizeplot=cbind(sizeplot,t(matsampsizes))
# matsampsizes$extract=vecExtract
# matsampsizes$conc=vectC
# matsampsizes$ech=vectDay
# matsampsizes$echtype=substr(vectDay, 1, 3)
dim(sizeplot)
sizeplot2=reshape2::melt(sizeplot,id.vars=c("conc","extract","ech","echtype"))
head(sizeplot2)
boxplot(log(value)~echtype,data=sizeplot2)
kktest=kruskal.test(log(value)~echtype,data=sizeplot2)
kktest
boxplot(log(value)~extract,data=sizeplot2)
kktest=kruskal.test(log(value)~extract,data=sizeplot2)
kktest
baseplot=ggplot(data=PROPLplot2,aes(x=variable,y=value))+
ylab("proportion in sample")+xlab("sequence types")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
baseplot2=ggplot(data=PROPLplot2,aes(x=length,y=value))+
ylab("proportion in sample")+xlab("sequence lengths")+
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
PROPLplot2$length2=factor(round(log(PROPLplot2$length)/log(10),1),levels=(seq(min(round(log(PROPLplot2$length)/log(10),1)),
max(round(log(PROPLplot2$length)/log(10),1)),
by=0.1)))
levels(PROPLplot2$length2)
baseplot3=ggplot(data=PROPLplot2,aes(x=length2,y=value))+scale_x_discrete(drop = FALSE)+
ylab("proportion in sample")+xlab("log10(sequence lengths)")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))#+
bysample=baseplot+geom_point(aes(color=ech),alpha=0.6)+ labs(color= "sample")#+ guides(fill=guide_legend(title="sample"))
print(bysample)
byextract=baseplot+geom_boxplot(aes(color=extract))+ labs(color= "extraction\nmethod")
print(byextract)
byechtype=baseplot+geom_boxplot(aes(color=echtype))+ labs(color= "samplen\ntype")
print(byechtype)
byconc=baseplot+geom_point(aes(color=conc),alpha=0.3)+ labs(color= "concentration\n(cg/microL)")
print(byconc)
bysample3=baseplot3+geom_point(aes(color=ech),alpha=0.6)+ labs(color= "sample")#+ guides(fill=guide_legend(title="sample"))
print(bysample3)
byextract3=baseplot3+geom_boxplot(aes(color=extract))+ labs(color= "extraction\nmethod")
print(byextract3)
byechtype3=baseplot3+geom_boxplot(aes(color=echtype))+ labs(color= "sample\ntype")
print(byechtype3)
byconc3=baseplot3+geom_point(aes(color=conc),alpha=0.5)+ labs(color= "concentration\n(cg/microL)")
print(byconc3)
bysample2=baseplot2+geom_line(aes(color=ech),alpha=0.6)+ labs(color= "sample")#+ guides(fill=guide_legend(title="sample"))
print(bysample2)
byextract2=baseplot2+geom_line(aes(color=extract,group=ech),alpha=0.6)+ labs(color= "extraction\nmethod")
print(byextract2)
byechtype2=baseplot2+geom_line(aes(color=echtype,group=ech),alpha=0.6)+ labs(color= "sample\ntype")
print(byechtype2)
byconc2=baseplot2+geom_line(aes(color=conc,group=ech),alpha=0.6)+ labs(color= "concentration\n(cg/microL)")
print(byconc2)
pdf("ProportionsEchantillons5cibles-EM-pobsfromLL-v20240320.pdf",width=8,height=5)
bysample=baseplot+geom_point(aes(color=ech),alpha=0.6)+ labs(color= "sample")#+ guides(fill=guide_legend(title="sample"))
print(bysample)
byextract=baseplot+geom_boxplot(aes(color=extract))+ labs(color= "extraction\nmethod")
print(byextract)
byechtype=baseplot+geom_boxplot(aes(color=echtype))+ labs(color= "samplen\ntype")
print(byechtype)
byconc=baseplot+geom_point(aes(color=conc),alpha=0.3)+ labs(color= "concentration\n(cg/microL)")
print(byconc)
bysample3=baseplot3+geom_point(aes(color=ech),alpha=0.6)+ labs(color= "sample")#+ guides(fill=guide_legend(title="sample"))
print(bysample3)
byextract3=baseplot3+geom_boxplot(aes(color=extract))+ labs(color= "extraction\nmethod")
print(byextract3)
byechtype3=baseplot3+geom_boxplot(aes(color=echtype))+ labs(color= "sample\ntype")
print(byechtype3)
byconc3=baseplot3+geom_point(aes(color=conc),alpha=0.5)+ labs(color= "concentration\n(cg/microL)")
print(byconc3)
bysample2=baseplot2+geom_line(aes(color=ech),alpha=0.6)+ labs(color= "sample")#+ guides(fill=guide_legend(title="sample"))
print(bysample2)
byextract2=baseplot2+geom_line(aes(color=extract,group=ech),alpha=0.6)+ labs(color= "extraction\nmethod")
print(byextract2)
byechtype2=baseplot2+geom_line(aes(color=echtype,group=ech),alpha=0.6)+ labs(color= "sample\ntype")
print(byechtype2)
byconc2=baseplot2+geom_line(aes(color=conc,group=ech),alpha=0.6)+ labs(color= "concentration\n(cg/microL)")
print(byconc2)
dev.off()
